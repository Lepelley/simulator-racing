package strategy;

import optimisation.Genome;
import Radar.Radar;
import Voiture.Commande;
import Voiture.Voiture;

public class StrategyGenome implements Strategy {
	private Voiture v;
	private Radar r;
	private double[] param;
	
	public StrategyGenome(Voiture v, Radar r, Genome<Double> gen){	
		this.v = v;	
		this.r = r;
		param = new double[gen.size()];
	
		for(int i = 0 ; i < gen.size(); i++){
			param[i] = gen.get(i);
		}
	}
 //factanglesecu = 0,accvirage =1,petitangle =2,
    public Commande getCommande() {
        r.scores();  
        
        double acc = 1;
		double turn = r.thetas()[r.getBestIndex()] / v.getBraquage(); 		
		double maxTurn = v.getMaxTurn();
		double angle = turn;
		
		if(turn < -v.getMaxTurn())
			angle = -v.getMaxTurn();
		if(turn > v.getMaxTurn())
			angle = v.getMaxTurn();
		
        if((param[0] * maxTurn) < Math.abs(turn)){
        	
        }

        Commande c = new Commande(acc, angle);
        return c;
    }
	
//	public Commande getCommande() {
//        radar.scores();        
//        double com =radar.thetas()[radar.getBestIndex()]/car.getBraquage();
//        double turnAbs = Math.min(Math.abs(com), car.getMaxTurn());
//
//        double acc = 1; // acc�l�ration par d�faut
//        if(radar.distancesInPixels()[0]<param[0])
//            acc = param[1];  
//        else if(radar.distancesInPixels()[radar.getBestIndex()] < (param[0]*1.5))
//            acc = param[1];                    
//        else if(param[2]*turnAbs < Math.abs(com)) acc = param[3];
//        else if(param[4]*turnAbs < Math.abs(com)) acc = param[5];
//
//        if(car.getVitesse() < param[6]) acc = 0.5;
//        if(car.getVitesse() < param[7]) acc = 1;
//        if(acc > 1) acc =1;
//        if(acc < -1) acc =-1;
//        Commande c = new Commande(acc, turnAbs * Math.signum(com));
//        return c;
//    }

}
