package simulation;

import geometrie.Vecteur;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.util.ArrayList;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;

import strategy.Strategy;
import tools.TerrainTools;
import Voiture.Commande;
import Voiture.Voiture;
import Voiture.VoitureException;
import Circuit.Circuit;
import Circuit.CircuitFactoryFromFile;
import Circuit.Terrain;
import IHM.CircuitObserver;
import IHM.UpdateEventListener;
import IHM.UpdateEventSender;
import IHM.Swing.IHMSwing;

public class Simulation implements UpdateEventSender{

	private ArrayList<Vecteur> trajet = new ArrayList<Vecteur>();
	private Circuit c;
	private Voiture v;
	private Strategy s;
	private ArrayList<Commande> record = new ArrayList<Commande>();
	private ArrayList<UpdateEventListener> list = new ArrayList<UpdateEventListener>();
	
	public Simulation(Circuit c, Voiture v, Strategy s){
		this.c=c;
		this.v=v;
		this.s=s;
		
	}
	
	public double play() throws VoitureException{
		int i=0;
		while(TerrainTools.isRunnable(c.getTerrain((int)v.getPosition().getX(), (int)v.getPosition().getY())) && c.getTerrain((int)v.getPosition().getX(),(int)v.getPosition().getY()) != Terrain.EndLine){
//			System.out.println(i++);
			i++;
//			System.out.println(v.getPosition()+" "+v.getDirection()+" "+v.getVitesse());
			trajet.add(new Vecteur(v.getPosition().getX(),v.getPosition().getY()));
			Commande com = s.getCommande();
			v.drive(com);
			update();
			record.add(com);
			trajet.add(new Vecteur(v.getPosition().getX(),v.getPosition().getY()));
		}
		System.out.println(i);
		return i;
	}
	
	public ArrayList<Vecteur> getList(){
			return trajet;
	}
	
	public ArrayList<Commande> getRecord(){
		     return record;
	}
	
	@Override
	public void add(UpdateEventListener listener) {
		list.add(listener);
		
	}
	
	@Override
	public void update() {
		for(UpdateEventListener listener : list)
				listener.manageUpdate();
		
	}
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	class Fenetre extends JFrame{
		
		private IHMSwing ihm = new IHMSwing();
		private JComboBox<String> circuitBox = new JComboBox<String>();
		private Circuit c = CircuitFactoryFromFile.build("Tracks/1_safe.trk");
		private CircuitObserver co = new CircuitObserver(c);
		
		public Fenetre() throws FileNotFoundException{
			this.setSize(1920,1080);
			this.setPreferredSize(new Dimension(1920, 1024));
			this.setLocation(0, 0);
			this.setResizable(false);
			this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			
			ihm.setMinimumSize(new Dimension(c.getHeight(),c.getWidth()));
			ihm.setPreferredSize(new Dimension(c.getHeight(),c.getWidth()));
			ihm.add(co);
		
			
			circuitBox.setPreferredSize(new Dimension(100, 20));
		    circuitBox.addItem("Option 1");
		    circuitBox.addItem("Option 2");
		    circuitBox.addItem("Option 3");
		    circuitBox.addItem("Option 4");
		    circuitBox.addActionListener(new CircuitBoxListener());
		    
			JPanel gauche = new JPanel();
			gauche.setMinimumSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
			gauche.setPreferredSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
			gauche.setBackground(Color.yellow);
			gauche.add(circuitBox);
			
			JPanel droite = new JPanel();
			droite.setMinimumSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
			droite.setPreferredSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
			droite.setBackground(Color.red);
			
			JPanel fond = new JPanel();
			fond.setBackground(Color.blue);
//			fond.setSize(new Dimension(this.getWidth(),this.getHeight()));
//			fond.setPreferredSize(new Dimension(this.getWidth(),this.getHeight()));
			GridBagLayout layout = new GridBagLayout();
			fond.setLayout(layout);
			
			
			JPanel orangeLayout = new JPanel();
			orangeLayout.setMinimumSize(new Dimension(5,this.getHeight()));
			orangeLayout.setPreferredSize(new Dimension(5,this.getHeight()));
			orangeLayout.setBackground(Color.orange);

			
			JPanel orangeLayout2 = new JPanel();
			orangeLayout2.setMinimumSize(new Dimension(5,this.getHeight()));
			orangeLayout2.setPreferredSize(new Dimension(5,this.getHeight()));
			orangeLayout2.setBackground(Color.orange);
			
			GridBagConstraints gc = new GridBagConstraints();
			gc.fill = GridBagConstraints.BOTH;
			gc.gridx = 0;
			gc.gridy = 0;
			gc.gridheight = 1;
			gc.gridwidth = 1;
			fond.add(gauche);
			
			gc.gridx = 1;
			fond.add(orangeLayout);
			gc.gridx = 2;
			fond.add(ihm);
			gc.gridx = 3;
			fond.add(orangeLayout2);
			gc.gridwidth = GridBagConstraints.REMAINDER;
			gc.gridx = 4;
			fond.add(droite);
			
			this.setContentPane(fond);
			
			
			this.pack();
			this.setVisible(true);
		}
		
		private void maj(){
			ihm.repaint();
		}
		
		class CircuitBoxListener implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent arg0) {
				 switch(circuitBox.getSelectedIndex()){
				 case 1 :
					 try {
						c = CircuitFactoryFromFile.build("Tracks/2_safe.trk");
						co = new CircuitObserver(c);
						
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}
					 ihm.add(co);
					 ihm.repaint();
//					 ihm.manageUpdate();
					 System.out.println("1");
					 break;
				 case 0 :
					 System.out.println("2");
					 break;
				 case 3 :
					 System.out.println("1");
					 break;
				 case 4 :
					 System.out.println("2");
					 break;
				 default :
					System.out.println("lol");	 
				 }
				
			}
			
		}
}

