package optimisation;

import java.util.Random;

public class GenereGenome implements GenomeGenerator<Double>{
	
	private double[] defaultparam = new double[8]; //-0.9
	private double[] defaultparamSig = new double[8]; //0.4
	private double[] paramMax = new double[8];
	private double[] paramMin = new double[8];	
	
	public void defaultparamSig(){
		
	}
	@Override
	public Genome<Double> build() {
		Random r = new Random();
		Genome<Double> gen = new Genome<Double>(); // génome vide
        for(int i=0; i<defaultparam.length; i++){
           // parcours d'un tableau de valeurs par défaut

           // génération aléatoire gaussienne
            double d = r.nextGaussian() * defaultparamSig()[i] + defaultparam()[i];
            d = Math.min(d, StrategyRadar.paramMax()[i]); // borne
            d = Math.max(d, StrategyRadar.paramMin()[i]);
            gen.add(d);
        }
        return gen;
	}

}
