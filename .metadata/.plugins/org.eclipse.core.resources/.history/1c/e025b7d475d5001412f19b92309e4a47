package simulation;

import geometrie.Vecteur;

import java.io.FileNotFoundException;
import java.util.ArrayList;

import javax.swing.JFrame;

import dijkstra.Dijkstra;
import strategy.Strategy;
import strategy.StrategyRadar;
import strategy.StrategyRadarDijkstra;
import tools.Fenetre;
import tools.TerrainTools;
import Radar.Radar;
import Voiture.Commande;
import Voiture.Voiture;
import Voiture.VoitureException;
import Voiture.VoitureFactory;
import Circuit.Circuit;
import Circuit.Terrain;
import IHM.UpdateEventListener;
import IHM.UpdateEventSender;
import IHM.Swing.IHMSwing;
import IHM.Swing.ManageIHM;

public class Simulation implements UpdateEventSender{

	private ArrayList<Vecteur> trajet = new ArrayList<Vecteur>();
	private Circuit c;
	private Voiture v;
	private Strategy s;
	private ArrayList<Commande> record = new ArrayList<Commande>();
	private ArrayList<UpdateEventListener> list = new ArrayList<UpdateEventListener>();
//	private Dijkstra dij;
	private Thread t;
	private int i = 0;
	
	private boolean animated = false;
	private boolean reussi = false;
	
	public Simulation(Circuit c, Voiture v, Strategy s) {
		this.c=c;
		this.v=v;
		this.s=s;
//		dij = new Dijkstra(c);
	}
	
	public int play() throws VoitureException{

		while(animated && TerrainTools.isRunnable(c.getTerrain((int)v.getPosition().getX(), (int)v.getPosition().getY())) && 
				c.getTerrain((int)v.getPosition().getX(),(int)v.getPosition().getY()) != Terrain.EndLine){
				i++;
				trajet.add(new Vecteur(v.getPosition().getX(),v.getPosition().getY()));
				Commande com = s.getCommande();
				v.drive(com);
				update();
				record.add(com);
				trajet.add(new Vecteur(v.getPosition().getX(),v.getPosition().getY()));
		}
		if(c.getTerrain(v.getPosition()) == Terrain.EndLine)
			reussi = true;
		else 
			reussi = false;
		System.out.println(i);
		return i;
	}

	public ArrayList<Vecteur> getList(){
			return trajet;
	}
	
	public ArrayList<Commande> getRecord(){
		     return record;
	}
	
	@Override
	public void add(UpdateEventListener listener) {
		list.add(listener);
		
	}
	
	public void remove(UpdateEventListener listener){
		list.remove(listener);
	}
	
	@Override
	public void update() {
		for(UpdateEventListener listener : list)
				listener.manageUpdate();
		
	}
	
	public void jouer(){
		t = new Thread(){
				public void run(){
					try{
						play();
					} catch (VoitureException e1){
						e1.printStackTrace();
					}
				}
			};
			t.start();
	}
	
	public void init(Strategy s, Circuit c,Voiture v){
		this.c = c;
		this.s = s;
		this.v = v;
		i = 0;
//		dij = new Dijkstra(c);
		
//		s.setRadar(c, v, dij);
	}



	public boolean isReussi(){
		return reussi;
	}
	public Circuit getCircuit() {
		return c;
	}

	public Voiture getVoiture() {
		return v;
	}
	
	public Strategy getStrategy(){
		return s;
	}

	
	public boolean isAnimated() {
		return animated;
	}

	public void setAnimated(boolean animated) {
		this.animated = animated;
	}

}

