package Radar;

import tools.TerrainTools;
import geometrie.Vecteur;
import Circuit.Circuit;
import Circuit.Terrain;
import Voiture.Voiture;

public class RadarDijkstra implements Radar{
	
	private double[] thetas = {0,-0.9,Math.PI/2,-Math.PI/2,-0.6,-0.3,0.3,0.6,0.9,-(Math.PI/12),-(Math.PI/20),(Math.PI/20),(Math.PI/12),(Math.PI/8),-(Math.PI/8),(Math.PI/30),-(Math.PI/30)};
	private double[] distPix = new double[thetas.length];
	
	private Voiture v;
	private Circuit c;
	private int bestIndex=0;
	private double[][] distDij;
	private double[] dist = new double[thetas.length];
	
	public RadarDijkstra(Voiture v,Circuit c,double[][] d){
		this.v = v;
		this.c = c;
		distDij=d;
		distPix = scores();
		triTab();
		
	}
	
	private  void triTab(){
		int i = thetas.length;
		boolean test;
		do{
			test=false;
			for(int j=0;j<i-1;j++){
				if(Math.abs(thetas[j])>Math.abs(thetas[j+1])){
				double t = thetas[j];
				thetas[j] = thetas[j+1];
				thetas[j+1] = t;
				test=true;
				}
			}
		i--;		
		}while(test==true);		
	}
	

	public double[] scores(){	
		Vecteur dir;
		Vecteur pos;
		int currentX;
		int currentY;
		bestIndex = 0;
		for(int i=0 ; i < distPix.length ; i++){
			pos = v.getPosition();
			currentX = (int) pos.getX();
			currentY = (int) pos.getY();
			
			dir= v.getDirection();
			dir.rotation(thetas[i]);
			
			while(TerrainTools.isRunnable(c.getTerrain((int) pos.getX(), (int) pos.getY()))){
				if(c.getTerrain(pos) == Terrain.EndLine)
					if(dir.scalaire(c.getDirectionArrivee())<0){
						dist[i] = 0;
						break;
					}
					else{
						dist[i] = Double.POSITIVE_INFINITY;
						break;
					}
				pos.additionVoid(dir.multiplicationReturn(0.1));
				
				// si la distance Dij de la position actuelle est inférieure à la meilleure distance actuelle, on remplace cette meilleure distance
				if(distDij[(int) pos.getX()][(int) pos.getY()] < distDij[currentX][currentY]){
					currentX= (int) pos.getX();
					currentY= (int) pos.getY();
				}
			}
			 
			dist[i] = distDij[currentX][currentY];
			distPix[i] = (Math.sqrt( Math.pow( pos.getX() - v.getPosition().getX() , 2) + Math.pow( pos.getY() - v.getPosition().getY() , 2)));
			if(dist[i] < dist[bestIndex]) 
				bestIndex = i;
		}
		return dist;
	}
	
	@Override 
	public double[] distancesInPixels() {
		return dist;
	}

	@Override
	public int getBestIndex() {
		return bestIndex;
	}

	@Override
	public double[] thetas() {
		return thetas;
	}

	
	
}
