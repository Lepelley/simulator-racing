package optimisation;

import java.util.Random;

public class GenereGenome implements GenomeGenerator<Double>{
	
	//private double[] defaultparam = new double[] {46, -0.82, 30, -1, 1.5, 0, 0.59, 0.40}; Course 1
	private double[] defaultparam = new double[] {59.73637717393116, 0.16623919752927474, 0.3516902713671737, -1.5230480823370156, 0.5550738516389255, 
			-0.025351267442250747, 0.2047364066199876, 0.6215264431709169}; // Course 1, 2870
	private double[] defaultparamSig = new double[] {0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4};
	private double[] paramMax = new double[] {300, 1, 1, 1, 1, 1, 1, 1};
	private double[] paramMin = new double[] {0, -1, 0, -1, 0, -1, 0.1, 0.1};
	
	public GenereGenome(){
		
	}
	public Genome<Double> build() {
		Random r = new Random();
		Genome<Double> gen = new Genome<Double>(); // génome vide
        for(int i=0; i<defaultparam.length; i++){
           // parcours d'un tableau de valeurs par défaut
           // génération aléatoire gaussienne
            double d = r.nextGaussian() * defaultparamSig[i] + defaultparam[i];
            d = Math.min(d, paramMax[i]); // borne
            d = Math.max(d, paramMin[i]);
            gen.add(d);
        }
        return gen;
	}
	
	public double[] getSigma(){
		return defaultparamSig;
	}
	
	public double[] getDefault(){
		return defaultparam;
	}

}