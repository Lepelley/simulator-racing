package IHM;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import optimisation.GenereGenome;
import optimisation.Genome;
import dijkstra.Dijkstra;
import Radar.RadarDijkstra;
import Voiture.Voiture;
import Voiture.VoitureFactory;
import simulation.Simulation;
import strategy.Strategy;
import strategy.StrategyGenome;
import strategy.StrategyRadarDijkstra;
import tools.DessinTools;
import Circuit.Circuit;
import Circuit.CircuitFactoryFromFile;
import IHM.Swing.IHMSwing;
import IHM.Swing.ManageIHM;

public class Fenetre extends JFrame{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private IHMSwing ihm;
	
	private JComboBox<String> circuitBox = new JComboBox<String>();
	private JComboBox<String> strategyBox = new JComboBox<String>();
	private JComboBox<String> circuitPersoBox = new JComboBox<String>();
	private JButton bouton = new JButton("Go");
	private JButton bouton2 = new JButton("Stop");
	private JButton swap = new JButton("Swap");
	private JPanel fondfond = new JPanel();
	private JLabel centre2;
	private ImagePerso imp; 
	
	private Simulation sim;
	private Circuit circuit = CircuitFactoryFromFile.build("Tracks/1_safe.trk");
	private Strategy s;
	private Voiture v;
	private Dijkstra dij;
	private  int stratSelector = 1;
	private int circuitSelector = 1;
	
	private CardLayout cl = new CardLayout();
	
	public Fenetre(Simulation sim, IHMSwing ihm) throws FileNotFoundException{
		this.setSize(1920,1080);
		this.setPreferredSize(new Dimension(1920, 1024));
		this.setMaximumSize(new Dimension(1920, 1024));
		this.setMinimumSize(new Dimension(1920, 1024));
		this.setLocation(0, 0);
		this.setResizable(false);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.sim = sim;
		this.ihm = ihm;
		this.v = sim.getVoiture();
		this.s = sim.getStrategy();
		
		
		//----------------------------------BOUTONS + COMBOBOXS-------------------------------
		
		bouton.setPreferredSize(new Dimension(70, 30));
		bouton.addActionListener(new BoutonListener()); 
	    bouton.setBackground(Color.red);
	    bouton2.setPreferredSize(new Dimension(70, 30));
	    bouton2.setBackground(Color.green);
	    bouton2.addActionListener(new Bouton2Listener());
	    swap.setPreferredSize(new Dimension(120,120));;
	    swap.addActionListener(new SwapListener());
	    swap.setBackground(Color.orange);
	    boutonsSet();
		
	    ihm.setBackground(Color.black);
		//selection circuit
		circuitBox.setPreferredSize(new Dimension(100, 20));
		circuitBox.addItem("1_safe");
		circuitBox.addItem("2_safe");
		circuitBox.addItem("3_safe");
		circuitBox.addItem("4_safe");
		circuitBox.addItem("5_safe");
		circuitBox.addItem("6_safe");
		circuitBox.addItem("7_safe");
		circuitBox.addItem("8_safe");
		circuitBox.addItem("aufeu");
		circuitBox.addItem("bond");
		circuitBox.addItem("Een2");
		circuitBox.addItem("labymod");
		circuitBox.addItem("labyperso");
		circuitBox.addItem("perso");
		circuitBox.addItem("t260_safe");
		circuitBox.addItem("t2009");
	    circuitBox.addActionListener(new CircuitBoxListener());
	    
	    circuitPersoBox.setPreferredSize(new Dimension(100, 20));
	    circuitPersoBox.addItem("1_safe-perso");
		circuitPersoBox.addItem("2_safe-perso");
		circuitPersoBox.addItem("3_safe-perso");
		circuitPersoBox.addItem("4_safe-perso");
		circuitPersoBox.addItem("5_safe-perso");
		circuitPersoBox.addItem("6_safe-perso");
		circuitPersoBox.addItem("7_safe-perso");
		circuitPersoBox.addItem("8_safe-perso");
		circuitPersoBox.addItem("aufeu-perso");
		circuitPersoBox.addItem("bond-perso");
		circuitPersoBox.addItem("Een2-perso");
		circuitPersoBox.addItem("labymod-perso");
		circuitPersoBox.addItem("labyperso-perso");
		circuitPersoBox.addItem("perso-perso");
		circuitPersoBox.addItem("t260_safe-perso");
		circuitPersoBox.addItem("t2009-perso");
		circuitPersoBox.addActionListener(new CircuitPersoBoxListener());
	    
	    //selection strategy
	    strategyBox.setPreferredSize(new Dimension(100, 20));
	    strategyBox.addItem("Option 1");
	    strategyBox.addItem("Jouer");
	    strategyBox.addItem("Stop");
	    strategyBox.addItem("Circuit 2");
	    strategyBox.addActionListener(new CircuitBoxListener());
	    
	    
	    
	    
//------------------------------------------------------------------------------------------------------------------------------------------
//******************************************************************************************************************************************			
//-------------------------------------------------------------TEMPS REEL-----------------------------------------------------------------
//******************************************************************************************************************************************		
//------------------------------------------------------------------------------------------------------------------------------------------
	    
	    //---------------------------------------------------GAUCHE BLEU------------------------------------------------------------------
	    
		JPanel gauche = new JPanel();
		gauche.setMinimumSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
		gauche.setPreferredSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
		gauche.setBackground(Color.blue);
		GridBagLayout layoutg = new GridBagLayout();
		gauche.setLayout(layoutg);
		GridBagConstraints gcg = new GridBagConstraints();
//		gcg.fill = GridBagConstraints.BOTH;
		gcg.gridheight = 1;
		gcg.gridwidth = 1;
		
		gcg.gridx = 0;
		gcg.gridy= 0;
		JLabel jCircuit = new JLabel("Circuit");
		jCircuit.setForeground(Color.orange);
		jCircuit.setPreferredSize(new Dimension(100,20));
		gauche.add(jCircuit,gcg);
		
		gcg.gridx = 1;
		gcg.gridwidth = GridBagConstraints.REMAINDER;
		JLabel jCircuitPerso = new JLabel("Circuit-Perso");
		jCircuitPerso.setPreferredSize(new Dimension(100,20));
		jCircuitPerso.setForeground(Color.orange);
		gauche.add(jCircuitPerso,gcg);
		
		gcg.gridx = 0;
		gcg.gridy = 1;
		gauche.add(circuitBox,gcg);
		
		gcg.gridx = 1;
//		gcg.gridwidth = GridBagConstraints.REMAINDER;
		gauche.add(circuitPersoBox,gcg);
		
		gcg.gridy=2;
		gcg.gridx=0;
//		gcg.gridwidth = GridBagConstraints.REMAINDER;
		JLabel jStrat = new JLabel("Strategies");
		jStrat.setForeground(Color.orange);
		gauche.add(jStrat,gcg);
		gcg.gridy = 3;
//		gcg.gridwidth = GridBagConstraints.REMAINDER;
		gauche.add(strategyBox,gcg);
		
		
		
		
		
		
//--------------------------------------------------------------CENTRE CIRCUIT---------------------------------------------------
		JPanel centre = new JPanel();
		centre.setMinimumSize(new Dimension(768,this.getHeight()));
		centre.setPreferredSize(new Dimension(768,this.getHeight()));
		centre.setBackground(Color.black);
//		centre.setLayout(new GridBagLayout());
//		GridBagConstraints gcc = new GridBagConstraints();
//		gcc.fill = GridBagConstraints.BOTH;
//		gcc.gridx = 0;
//		gcc.gridy= 0;
//		gcc.gridheight = 1;
//		gcc.gridwidth = 1;
		centre.setAlignmentY(TOP_ALIGNMENT);
		centre.add(ihm);

		
		
//------------------------------------------------------------DROITE BLEU----------------------------------------------------------
		JPanel droite = new JPanel();
		droite.setMinimumSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
		droite.setPreferredSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
		droite.setBackground(Color.blue);
		GridBagLayout layoutd = new GridBagLayout();
		droite.setLayout(layoutd);
		GridBagConstraints gcd = new GridBagConstraints();
		gcd.fill = GridBagConstraints.BOTH;
		gcd.gridx = 0;
		gcd.gridy= 0;
		gcd.gridheight = 1;
		gcd.gridwidth = 1;
		droite.add(bouton,gcd);
		gcd.gridx = 1;	
		gcd.gridwidth = GridBagConstraints.REMAINDER;
		droite.add(bouton2,gcd);
		
		gcd.gridx = 0;
		gcd.gridy= 1;
		gcd.anchor = GridBagConstraints.LINE_START;
		gcd.fill = GridBagConstraints.HORIZONTAL;
		gcd.gridwidth = GridBagConstraints.REMAINDER;
		droite.add(swap);
		
		
		
		
//-----------------------------------------------------------BANDES ORANGES---------------------------------------------------
		JPanel orangeLayout = new JPanel();
		orangeLayout.setMinimumSize(new Dimension(5,this.getHeight()));
		orangeLayout.setPreferredSize(new Dimension(5,this.getHeight()));
		orangeLayout.setBackground(Color.orange);

		
		JPanel orangeLayout2 = new JPanel();
		orangeLayout2.setMinimumSize(new Dimension(5,this.getHeight()));
		orangeLayout2.setPreferredSize(new Dimension(5,this.getHeight()));
		orangeLayout2.setBackground(Color.orange);
		
		
		
		
//---------------------------------------------------------FOND CONTENU IHM------------------------------------------------------
		JPanel fond = new JPanel();
		fond.setBackground(Color.blue);
		fond.setSize(new Dimension(this.getWidth(),this.getHeight()));
		fond.setPreferredSize(new Dimension(this.getWidth(),this.getHeight()));
		GridBagLayout layout = new GridBagLayout();
		fond.setLayout(layout);
		
		
		GridBagConstraints gc = new GridBagConstraints();
		gc.fill = GridBagConstraints.BOTH;
		gc.gridx = 0;
		gc.gridy = 0;
		gc.gridheight = 1;
		gc.gridwidth = 1;
		fond.add(gauche,gc);
		
		gc.gridx = 1;
		fond.add(orangeLayout,gc);
		gc.gridx = 2;
		fond.add(centre,gc);
		gc.gridx = 3;
		fond.add(orangeLayout2,gc);
		gc.gridx = 4;
		gc.gridwidth = GridBagConstraints.REMAINDER;
		fond.add(droite,gc);
		
		
		
		
		
		
//------------------------------------------------------------------------------------------------------------------------------------------
//******************************************************************************************************************************************			
//-------------------------------------------------------------MODIFICATION-----------------------------------------------------------------
//******************************************************************************************************************************************		
//------------------------------------------------------------------------------------------------------------------------------------------		
	
		
		
//--------------------------------------------------------------GAUCHE---------------------------------------------------------------------
		JPanel gauche2 = new JPanel();
		gauche2.setMinimumSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
		gauche2.setPreferredSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
		gauche2.setBackground(Color.orange);
		
		
		
		
//--------------------------------------------------------------CENTRE--------------------------------------------------------------------
		
		JPanel centre2 = new JPanel();
		centre2.setMinimumSize(new Dimension(768,this.getHeight()));
		centre2.setPreferredSize(new Dimension(768,this.getHeight()));
		


		
		
		
//--------------------------------------------------------------DROITE--------------------------------------------------------------------
		JPanel droite2 = new JPanel();
		droite2.setMinimumSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
		droite2.setPreferredSize(new Dimension(((this.getWidth()-768)/2)-5,this.getHeight()));
		droite2.setBackground(Color.orange);
		

		
		
//--------------------------------------------------------------BARRES BLEUES-----------------------------------------------------------
		
		JPanel blueLayout = new JPanel();
		blueLayout.setMinimumSize(new Dimension(5,this.getHeight()));
		blueLayout.setPreferredSize(new Dimension(5,this.getHeight()));
		blueLayout.setBackground(Color.blue);

		
		JPanel blueLayout2 = new JPanel();
		blueLayout2.setMinimumSize(new Dimension(5,this.getHeight()));
		blueLayout2.setPreferredSize(new Dimension(5,this.getHeight()));
		blueLayout2.setBackground(Color.blue);
		
		
		
		
//------------------------------------------------------------FOND-----------------------------------------------------------------------
		JPanel changes = new JPanel();
		changes.setPreferredSize(new Dimension(1920,1024));
		changes.setBackground(Color.orange);
		
		
		

		GridBagLayout layout2 = new GridBagLayout();
		changes.setLayout(layout2);
		
		
		GridBagConstraints gc2 = new GridBagConstraints();
		gc2.fill = GridBagConstraints.BOTH;
		gc2.gridx = 0;
		gc2.gridy = 0;
		gc2.gridheight = 1;
		gc2.gridwidth = 1;
		changes.add(gauche2);
		
		gc2.gridx = 1;
		changes.add(blueLayout,gc2);
		gc2.gridx = 2;
		changes.add(centre2,gc2);
		gc2.gridx = 3;
		changes.add(blueLayout2,gc2);
		gc2.gridx = 4;
		gc2.gridwidth = GridBagConstraints.REMAINDER;
		changes.add(droite2,gc2);
		
		
		
		
//------------------------------------------------------------FOND GLOBAL (FOND IHM + FOND MODIF) ----------------------------------------------
		fondfond.setBackground(Color.blue);
		fondfond.setLayout(cl);
		fondfond.add(fond);
		fondfond.add(changes);
		
		
		
		
		
		
		
		
		this.setContentPane(fondfond);
		this.pack();
		this.setVisible(true);
	}

	

	class CircuitBoxListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent arg0) {
			int indice = circuitBox.getSelectedIndex()+1;
			if(indice == circuitSelector) return;
			
			
			sim.setAnimated(false);
			boutonsSet();
			
			// /!\ RESPECTER ORDRE CIRCUIT-VOITURE-STRAT /!\
			 //changement circuit
			 try { selecCircuit(indice,""); } catch (FileNotFoundException e) {e.printStackTrace();}
			
			 //nouvelle voiture
			 v = VoitureFactory.build(circuit.getPointDepart(), circuit.getDirectionDepart());
			
			 //nouvelle strat associée à la nouvelle voiture +circuit(pour radar) si nécessaire
			 selecStrat(stratSelector);
			 
			 
			 sim.init(s,circuit,v);
			 ManageIHM.manageIHM(ihm, circuit,sim.getVoiture());
			
			 repaint(); 
			 }
			
		}
	
	class CircuitPersoBoxListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent arg0) {
			int indice = circuitBox.getSelectedIndex()+1;
			if(indice == circuitSelector) return;
			
			
			sim.setAnimated(false);
			boutonsSet();
			
			// /!\ RESPECTER ORDRE CIRCUIT-VOITURE-STRAT /!\
			 //changement circuit
			 try { selecCircuit(indice,"-perso"); } catch (FileNotFoundException e) {e.printStackTrace();}
			
			 //nouvelle voiture
			 v = VoitureFactory.build(circuit.getPointDepart(), circuit.getDirectionDepart());
			
			 //nouvelle strat associée à la nouvelle voiture +circuit(pour radar) si nécessaire
			 selecStrat(stratSelector);
			 
			 
			 sim.init(s,circuit,v);
			 ManageIHM.manageIHM(ihm, circuit,sim.getVoiture());
			
			 repaint(); 
			 }
			
		}
		
	class StrategyBoxListener implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent arg0) {

			}
		
		}
		
	class BoutonListener implements ActionListener{
			  public void actionPerformed(ActionEvent arg0) {
				  sim.setAnimated(true);
				  boutonsSet();
				  sim.jouer();
			  }
		  }
		  
	class Bouton2Listener implements ActionListener{
			  public void actionPerformed(ActionEvent e) {
				  sim.setAnimated(false);
				  boutonsSet();
			  }	
		  }    
		
	class SwapListener implements ActionListener{
	      public void actionPerformed(ActionEvent event){
	  		BufferedImage circ = DessinTools.imageFromCircuit(circuit);
			JLabel lab = new JLabel(new ImageIcon(circ));
			
			centre2.add(lab);
			
			imp = new ImagePerso(circuit);
			lab.addMouseListener(imp);
	        cl.next(fondfond);
	      }
	    }
			  
	private void boutonsSet(){
		if(sim.isAnimated()){
			bouton.setEnabled(false);
		    bouton2.setEnabled(true);
			   bouton2.setBackground(Color.red);
			   bouton.setBackground(Color.gray);
		}
		else{
			bouton2.setEnabled(false);
		    bouton.setEnabled(true);
		    bouton.setBackground(Color.green);
		    bouton2.setBackground(Color.gray);
		}
	}
		
	private void selecStrat(int i){
		GenereGenome gen = new GenereGenome();
		Genome<Double> g = new Genome<Double>();
		for(double x:gen.getDefault()){
			g.add(x);
		}
		 s = new StrategyGenome(v, new RadarDijkstra(v, circuit, dij.getMatrice()), g);
	}
		
	private void selecCircuit(int i,String s) throws FileNotFoundException{
			if(i == circuitSelector)
				return;
			
			circuitSelector = i;
			
			switch(i){
			case 1 :
				circuit = CircuitFactoryFromFile.build("Tracks/1_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 2 :
				circuit = CircuitFactoryFromFile.build("Tracks/2_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 3 :
				circuit = CircuitFactoryFromFile.build("Tracks/3_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case  4:
				circuit = CircuitFactoryFromFile.build("Tracks/4_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 5 :
				circuit = CircuitFactoryFromFile.build("Tracks/5_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 6 :
				circuit = CircuitFactoryFromFile.build("Tracks/6_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 7 :
				circuit = CircuitFactoryFromFile.build("Tracks/7_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 8 :
				circuit = CircuitFactoryFromFile.build("Tracks/8_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 9 :
				circuit = CircuitFactoryFromFile.build("Tracks/aufeu.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 10 :
				circuit = CircuitFactoryFromFile.build("Tracks/bond_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 11 :
				circuit = CircuitFactoryFromFile.build("Tracks/Een2.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 12 :
				circuit = CircuitFactoryFromFile.build("Tracks/labymod.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 13 :
				circuit = CircuitFactoryFromFile.build("Tracks/labyperso.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 14 :
				circuit = CircuitFactoryFromFile.build("Tracks/perso.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 15 :
				circuit = CircuitFactoryFromFile.build("Tracks/t260_safe.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			case 16 :
				circuit = CircuitFactoryFromFile.build("Tracks/t2009.trk"+s);
				dij = new Dijkstra(circuit);
				break;
			default :
				circuit = CircuitFactoryFromFile.build("Tracks/1_safe.trk"+s);
				dij = new Dijkstra(circuit);
			}
		}
		
	}

