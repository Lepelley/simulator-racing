package strategy;

import Circuit.Circuit;
import Radar.Radar;
import Voiture.Commande;
import Voiture.Voiture;

public class StrategyGenome implements Strategy {
	private Voiture car;
	private Radar radar;
	private Circuit track;
	private Double[] param;
	
	public StrategyGenome(Voiture v, Radar r, Circuit track){
		this.car = v;
		this.radar = r;
		this.track=track;
		
	}

    public Commande getCommande() {
        radar.scores();        
        double com = radar.thetas()[radar.getBestIndex()]/car.getBraquage();
        double turnAbs = Math.min(Math.abs(com), car.getMaxTurn());

        double acc = 1; // accélération par défaut
        if(radar.distancesInPixels()[0]<param[0])
            acc = param[1];  
        else if(radar.distancesInPixels()[radar.getBestIndex()] < param[0]*1.5)
            acc = param[1];                    
        else if(param[2]*turnAbs < Math.abs(com)) acc = param[3];
        else if(param[4]*turnAbs < Math.abs(com)) acc = param[5];

        if(car.getVitesse() < param[6]) acc = 0.5;
        if(car.getVitesse() < param[7]) acc = 1;

        Commande c = new Commande(acc, turnAbs * Math.signum(com));
        return c;
    }

}
